{"version":3,"sources":["webpay_plus.js"],"names":["WebpayPlus","require","asyncHandler","exports","create","request","response","buyOrder","sessionId","amount","returnUrl","createResponse","token","url","viewData","regeneratorRuntime","async","_context","prev","next","floor","Math","random","protocol","get","awrap","Transaction","sent","stepDescription","stop","commit","commitResponse","_context2","body","token_ws","render","step","statusResponse","_context3","status","refund","_request$body","refundResponse","_context4"],"mappings":"aAAA,IAAMA,WAAaC,QAAQ,iBAAiBD,WACtCE,aAAeD,QAAQ,0BAE7BE,QAAQC,OAASF,aAAa,SAAgBG,EAASC,GAAzB,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAFxBjB,EAAY,KAAGD,KAAQmB,MAAD,IAACC,KAAAC,UAA7B,EAIMd,EAAY,KAAOa,KAAKD,MAAsB,IAAhBC,KAAKC,UAAoB,EAF/Bb,EAAA,IAAAC,EAAAL,EAAAkB,SAAA,MAAAlB,EAAAmB,IAAA,QAAA,sBAAAP,EAAAE,KAAA,EAAAJ,mBAAAU,MAAAzB,WAAA0B,YAAAtB,OACxBG,EACAC,EASFC,EAPEA,IAJwB,KAAA,EAAAE,EAAAM,EAAAU,KAAAf,EAAAD,EAAAC,MAgBxBC,EAAMF,EAAeE,IARnBF,EAAAA,CAOFC,SAAAA,EACAC,UAAAA,EAEAC,OAAAA,EACFP,UAAAA,EACAC,MAAAA,EACAC,IAAAA,GAEAG,EAAAA,OAAK,qBALQ,CAMbC,KAAAA,oBANae,gBAQftB,gLAEEsB,SAAAA,IA5B0B,KAAA,GAAA,IAAA,MAAA,OAAAX,EAAAY,YAAA1B,QAAA2B,OAAA5B,aAAA,SAAAG,EAAAC,GAAA,IAAAM,EAAAmB,EAAAjB,EAAA,OAAAC,mBAAAC,MAAA,SAAAgB,GAAA,OAAA,OAAAA,EAAAd,KAAAc,EAAAb,MAAA,KAAA,EAAA,OAAAP,EAAAP,EAAA4B,KAAAC,SAAAF,EAAAb,KAAA,EAAAJ,mBAAAU,MAAAzB,WAAA0B,YAAAI,OAAAlB,IAAA,KAAA,EAAAmB,EAAAC,EAAAL,KAAAb,EAAA,CAA9BF,MAAAA,EAmCAT,eAAAA,GAA8BG,EAAA6B,OAAA,qBAAA,CAAAC,KAAA,wBAAAR,gBACxBhB,8NAeFE,SAAAA,IAnD0B,KAAA,EAAA,IAAA,MAAA,OAAAkB,EAAAH,YAyC1BjB,QAAAA,OAAKV,aADQ,SAAAG,EAAAC,GAAA,IAAAM,EAAAyB,EAAAvB,EAAA,OAAAC,mBAAAC,MAAA,SAAAsB,GAAA,OAAA,OAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,KAAA,EAAA,OAEbY,EAAAA,EAAAA,KAAcnB,MAFD0B,EAAAnB,KAAA,EAAAJ,mBAAAU,MAKCzB,WAAA0B,YAAsBa,OAAA3B,IALvB,KAAA,EAKfN,EALegC,EAAAX,KAObC,EAAAA,CAIAd,MAAAA,EANoCuB,eAAAA,GAVV/B,EAAA6B,OAAA,qBAAA,CAAAC,KAAA,wBAAAR,gBAAA,oNAoB9BzB,SAAAA,IAfiB,KAAA,EAAA,IAAA,MAAA,OAAAmC,EAAAT,YAea1B,QAAAqC,OAAAtC,aAAA,SAAAG,EAAAC,GAAA,IAAAmC,EAAA7B,EAAAH,EAAAiC,EAAA5B,EAAA,OAAAC,mBAAAC,MAAA,SAAA2B,GAAA,OAAA,OAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,KAAA,EAAA,OAAAsB,EAAApC,EAAA4B,KAAArB,EAAA6B,EAAA7B,MAAAH,EAAAgC,EAAAhC,OAAAkC,EAAAxB,KAAA,EAAAJ,mBAAAU,MAAAzB,WAAA0B,YAAAc,OAAA5B,EAAAH,IAAA,KAAA,EAAAiC,EAAAC,EAAAhB,KAyBxBb,EAAW,CAzBaF,MAAAA,EAGtByB,OAAAA,EAEFvB,eAAAA,GAAWR,EALa6B,OAAA,qBAAA,CAU5B7B,KAAAA,2BACE8B,gBACAR,6JAFoCd,SAAAA,IAVV,KAAA,EAAA,IAAA,MAAA,OAAA6B,EAAAd","file":"webpay_plus.min.js","sourcesContent":["const WebpayPlus = require(\"transbank-sdk\").WebpayPlus;\r\nconst asyncHandler = require(\"../utils/async_handler\");\r\n\r\nexports.create = asyncHandler(async function (request, response, next) {\r\n  let buyOrder = \"O-\" + Math.floor(Math.random() * 10000) + 1;\r\n  let sessionId = \"S-\" + Math.floor(Math.random() * 10000) + 1;\r\n  //let amount = Math.floor(Math.random() * 1000) + 1001;\r\n  let amount = 1000;\r\n  let returnUrl =\r\n    request.protocol + \"://\" + request.get(\"host\") + \"/webpay_plus/commit\";\r\n\r\n  const createResponse = await WebpayPlus.Transaction.create(\r\n    buyOrder,\r\n    sessionId,\r\n    amount,\r\n    returnUrl\r\n  );\r\n\r\n  let token = createResponse.token;\r\n  let url = createResponse.url;\r\n\r\n  let viewData = {\r\n    buyOrder,\r\n    sessionId,\r\n    amount,\r\n    returnUrl,\r\n    token,\r\n    url,\r\n  };\r\n  response.render(\"webpay_plus/create\", {\r\n    step: \"Crear Transacción\",\r\n    stepDescription:\r\n      \"En este paso crearemos la transacción con el objetivo de obtener un identificador unico y \" +\r\n      \"poder en el siguiente paso redirigir al Tarjetahabiente hacia el formulario de pago\",\r\n    viewData,\r\n  });\r\n});\r\n\r\nexports.commit = asyncHandler(async function (request, response, next) {\r\n  let token = request.body.token_ws;\r\n\r\n  const commitResponse = await WebpayPlus.Transaction.commit(token);\r\n\r\n  let viewData = {\r\n    token,\r\n    commitResponse,\r\n  };\r\n\r\n  response.render(\"webpay_plus/commit\", {\r\n    step: \"Confirmar Transacción\",\r\n    stepDescription:\r\n      \"En este paso tenemos que confirmar la transacción con el objetivo de avisar a \" +\r\n      \"Transbank que hemos recibido la transacción ha sido recibida exitosamente. En caso de que \" +\r\n      \"no se confirme la transacción, ésta será reversada.\",\r\n    viewData,\r\n  });\r\n});\r\n\r\nexports.status = asyncHandler(async function (request, response, next) {\r\n  let token = request.body.token;\r\n\r\n  const statusResponse = await WebpayPlus.Transaction.status(token);\r\n\r\n  let viewData = {\r\n    token,\r\n    statusResponse,\r\n  };\r\n\r\n  response.render(\"webpay_plus/status\", {\r\n    step: \"Estado de Transacción\",\r\n    stepDescription:\r\n      \"Puedes solicitar el estado de una transacción hasta 7 días despues de que haya sido\" +\r\n      \" realizada. No hay limite de solicitudes de este tipo, sin embargo, una vez pasados los \" +\r\n      \"7 días ya no podrás revisar su estado.\",\r\n    viewData,\r\n  });\r\n});\r\n\r\nexports.refund = asyncHandler(async function (request, response, next) {\r\n  let { token, amount } = request.body;\r\n\r\n  const refundResponse = await WebpayPlus.Transaction.refund(token, amount);\r\n\r\n  let viewData = {\r\n    token,\r\n    amount,\r\n    refundResponse,\r\n  };\r\n\r\n  response.render(\"webpay_plus/refund\", {\r\n    step: \"Reembolso de Transacción\",\r\n    stepDescription:\r\n      \"Podrás pedir el reembolso del dinero al tarjeta habiente, dependiendo del monto \" +\r\n      \"y el tiempo transacurrido será una Reversa, Anulación o Anulación parcial.\",\r\n    viewData,\r\n  });\r\n});\r\n"]}